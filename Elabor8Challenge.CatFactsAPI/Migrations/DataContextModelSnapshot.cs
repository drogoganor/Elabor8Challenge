// <auto-generated />
using System;
using Elabor8Challenge.CatFactsAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elabor8Challenge.CatFactsAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("CatFactUser", b =>
                {
                    b.Property<string>("UpvotedCatFactsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserUpvotedId")
                        .HasColumnType("TEXT");

                    b.HasKey("UpvotedCatFactsId", "UserUpvotedId");

                    b.HasIndex("UserUpvotedId");

                    b.ToTable("CatFactUser");
                });

            modelBuilder.Entity("Elabor8Challenge.CatFactsAPI.Model.CatFact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Upvotes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Used")
                        .HasColumnType("INTEGER");

                    b.Property<int>("V")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("CatFacts");
                });

            modelBuilder.Entity("Elabor8Challenge.CatFactsAPI.Model.FactStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("SentCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Verified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FactStatuses");
                });

            modelBuilder.Entity("Elabor8Challenge.CatFactsAPI.Model.Name", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("First")
                        .HasColumnType("TEXT");

                    b.Property<string>("Last")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("Elabor8Challenge.CatFactsAPI.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CatFactUser", b =>
                {
                    b.HasOne("Elabor8Challenge.CatFactsAPI.Model.CatFact", null)
                        .WithMany()
                        .HasForeignKey("UpvotedCatFactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elabor8Challenge.CatFactsAPI.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserUpvotedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elabor8Challenge.CatFactsAPI.Model.CatFact", b =>
                {
                    b.HasOne("Elabor8Challenge.CatFactsAPI.Model.FactStatus", "Status")
                        .WithMany("Facts")
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Elabor8Challenge.CatFactsAPI.Model.User", b =>
                {
                    b.HasOne("Elabor8Challenge.CatFactsAPI.Model.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Elabor8Challenge.CatFactsAPI.Model.FactStatus", b =>
                {
                    b.Navigation("Facts");
                });
#pragma warning restore 612, 618
        }
    }
}
